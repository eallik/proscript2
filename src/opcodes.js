"use strict";
exports=module.exports;

// Javascript seems really bad at optimising this so we have to do it manually on its behalf :(


var opcodes =
    [
        {opcode: 0,
         label: "i_fail",
	 args: []},
        {opcode: 1,
         label: "i_enter",
         args: []},
        {opcode: 2,
         label:"i_exitquery",
         args: []},
        {opcode: 3,
         label:"i_exitcatch",
         args: ["slot"]},
        {opcode: 4,
         label: "i_foreign",
         args: ["foreign_function"]},
        {opcode: 5,
         label: "i_foreignretry",
         args: []},
        {opcode: 6,
	 label:"i_exit",
	 args: []},
        {opcode: 7,
	 label:"i_exitfact",
         args: []},
        {opcode: 8,
	 label:"i_depart",
	 args: ["functor"]},
        {opcode: 9,
         label:"b_cleanup_choicepoint",
         args: []},
        {opcode: 10,
         label:"b_throw",
         args: []},
        {opcode: 11,
         label:"b_throw_foreign",
         args: []},
        {opcode: 12,
         label:"i_switch_module",
         args: ["atom"]},
        {opcode: 13,
         label:"i_exitmodule",
         args: []},
        {opcode: 14,
	 label:"i_call",
	 args: ["functor"]},
        {opcode: 15,
         label:"i_catch",
         args: ["slot"]},
        {opcode: 16,
         label:"i_usercall",
         args: []},
        {opcode: 17,
	 label:"i_cut",
	 args: []},
        {opcode: 18,
         label:"c_cut",
         args: ["slot"]},
        {opcode: 19,
         label:"c_lcut",
         args: ["slot"]},
        {opcode: 20,
         label:"c_ifthen",
         args: ["slot"]},
        {opcode: 21,
         label:"c_ifthenelse",
         args: ["slot", "address"]},
        {opcode: 22,
	 label:"i_unify",
	 args: []},
        {opcode: 23,
	 label: "b_firstvar",
	 args:["slot"]},
        {opcode: 24,
	 label: "b_argvar",
	 args: ["slot"]},
        {opcode: 25,
	 label: "b_var",
	 args: ["slot"]},
        {opcode: 26,
	 label: "b_pop",
	 args: []},
        {opcode: 27,
	 label: "b_atom",
	 args: ["atom"]},
        {opcode: 28,
         label: "b_void",
         args: []},
        {opcode: 29,
	 label: "b_functor",
         args: ["functor"]},
        {opcode: 30,
	 label: "h_firstvar",
         args: ["slot"]},
        {opcode: 31,
	 label: "h_functor",
         args: ["functor"]},
        {opcode: 32,
	 label: "h_pop",
	 args: []},
        {opcode: 33,
	 label: "h_atom",
	 args: ["atom"]},
        {opcode: 34,
	 label: "h_void",
	 args: []},
        {opcode: 35,
	 label: "h_var",
         args: ["slot"]},
        {opcode: 36,
	 label: "c_jump",
	 args: ["address"]},
        {opcode: 37,
	 label: "c_or",
         args: ["address"]},
        {opcode: 38,
         label: "try_me_or_next_clause",
         args: []},
        {opcode: 39,
	 label: "trust_me",
         args: []},
        {opcode: 40,
         label: "s_qualify",
         args: ["slot"]},
        {opcode: 41,
	 label: "nop",
         args: []}
    ];

var map = {};

for (var i = 0; i < opcodes.length; i++)
{
    if (opcodes[i].opcode != i)
        throw new Error("Opcode " + opcodes[i].label + " is in position " + i + " but has opcode " + opcodes[i].opcode);
    map[opcodes[i].label] = opcodes[i];
}

module.exports = {opcodes:opcodes,
                  opcode_map: map};
