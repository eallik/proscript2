var AtomTerm = require('./atom_term.js');
var Functor = require('./functor.js');

module.exports = {emptyListAtom: new AtomTerm("[]"),
		  cutAtom: new AtomTerm("!"),
		  failAtom: new AtomTerm("fail"),
                  trueAtom: new AtomTerm("true"),
                  atomAtom: new AtomTerm("atom"),
                  atomicAtom: new AtomTerm("atomic"),
                  catchAtom: new AtomTerm("$catch"),
                  modifyAtom: new AtomTerm("modify"),
                  characterAtom: new AtomTerm("character"),
                  characterCodeAtom: new AtomTerm("character_code"),
                  boundedAtom: new AtomTerm("bounded"),
                  nonEmptyListAtom: new AtomTerm("non_empty_list"),
                  compoundAtom: new AtomTerm("compound"),
                  callableAtom: new AtomTerm("callable"),
                  unboundedAtom: new AtomTerm("unbounded"),
                  flagAtom: new AtomTerm("flag"),
                  flagValueAtom: new AtomTerm("flag_value"),
                  maxIntegerAtom: new AtomTerm("max_integer"),
                  minIntegerAtom: new AtomTerm("min_integer"),
                  integerRoundingFunctionAtom: new AtomTerm("integer_rounding_function"),
                  towardZeroAtom: new AtomTerm("toward_zero"),
                  onAtom: new AtomTerm("on"),
                  offAtom: new AtomTerm("off"),
                  maxArityAtom: new AtomTerm("max_arity"),
                  streamOptionAtom: new AtomTerm("stream_option"),
                  ioModeAtom: new AtomTerm("io_mode"),
                  dbReferenceAtom: new AtomTerm("db_reference"),
                  endOfFileAtom: new AtomTerm("end_of_file"),
                  evaluableAtom: new AtomTerm("evaluable"),
                  floatAtom: new AtomTerm("float"),
                  numberAtom: new AtomTerm("number"),
                  numericAtom: new AtomTerm("numeric"), // CHECKME: Suspicious
                  integerAtom: new AtomTerm("integer"),
                  keyAtom: new AtomTerm("key"),
                  listAtom: new AtomTerm("list"),
                  operatorAtom: new AtomTerm("operator"),
                  positionAtom: new AtomTerm("position"),
                  privateProcedureAtom: new AtomTerm("private_procedure"),
                  operatorPriorityAtom: new AtomTerm("operator_priority"),
                  operatorSpecifierAtom: new AtomTerm("operator_specifier"),
                  notLessThanZeroAtom: new AtomTerm("not_less_than_zero"),
                  predicateIndicatorAtom: new AtomTerm("predicate_indicator"),
                  prologFlagAtom: new AtomTerm("prolog_flag"),
                  staticProcedureAtom: new AtomTerm("static_procedure"),
                  procedureAtom: new AtomTerm("procedure"),
                  streamAtom: new AtomTerm("stream"),
                  streamOptionAtom: new AtomTerm("stream_option"),
                  writeAtom: new AtomTerm("write"),
                  writeOptionAtom: new AtomTerm("write_option"),
                  readOptionAtom: new AtomTerm("read_option"),
                  illegalNumberAtom: new AtomTerm("illegal_number"),
                  streamOrAliasAtom: new AtomTerm("stream_or_alias"),
                  accessAtom: new AtomTerm("access"),

                  systemErrorFunctor: new Functor(new AtomTerm("system_error"), 1),
                  pairFunctor: new Functor(new AtomTerm("-"), 2),
                  failFunctor: new Functor(new AtomTerm("fail"), 0),
                  crossModuleCallFunctor: new Functor(new AtomTerm(":"), 2),
                  addFunctor: new Functor(new AtomTerm("+"), 2),
                  rdivFunctor: new Functor(new AtomTerm("rdiv"), 2),
                  subtractFunctor: new Functor(new AtomTerm("-"), 2),
                  multiplyFunctor: new Functor(new AtomTerm("*"), 2),
                  exponentiationFunctor: new Functor(new AtomTerm("^"), 2),
                  intDivFunctor: new Functor(new AtomTerm("//"), 2),
                  divisionFunctor: new Functor(new AtomTerm("/"), 2),
                  remainderFunctor: new Functor(new AtomTerm("rem"), 2),
                  moduloFunctor: new Functor(new AtomTerm("mod"), 2),
                  negateFunctor: new Functor(new AtomTerm("-"), 1),
                  absFunctor: new Functor(new AtomTerm("abs"), 1),
                  signFunctor: new Functor(new AtomTerm("sign"), 1),
                  floatIntegerPartFunctor: new Functor(new AtomTerm("float_integer_part"), 1),
                  floatFractionPartFunctor: new Functor(new AtomTerm("float_fraction_part"), 1),
                  floatFunctor: new Functor(new AtomTerm("float"), 1),
                  floorFunctor: new Functor(new AtomTerm("floor"), 1),
                  truncateFunctor: new Functor(new AtomTerm("truncate"), 1),
                  roundFunctor: new Functor(new AtomTerm("round"), 1),
                  ceilingFunctor: new Functor(new AtomTerm("ceiling"), 1),
                  moduleFunctor: new Functor(new AtomTerm("module"), 2),
                  predicateIndicatorFunctor: new Functor(new AtomTerm("/"), 2),
                  numberedVarFunctor: new Functor(new AtomTerm("$VAR"), 1),
                  cleanupChoicepointFunctor: new Functor(new AtomTerm("$cleanup_choicepoint"), 2),
                  curlyFunctor: new Functor(new AtomTerm("{}"), 1),
                  catchFunctor: new Functor(new AtomTerm("catch"), 3),
                  caughtFunctor: new Functor(new AtomTerm("caught"), 0), // A frame which has already caught an exception. See b_throw_foreign
                  throwFunctor: new Functor(new AtomTerm("throw"), 1),
                  unifyFunctor: new Functor(new AtomTerm("="), 2),
                  notFunctor: new Functor(new AtomTerm("\\+"), 1),
                  notUnifiableFunctor: new Functor(new AtomTerm("\\="), 2),
                  directiveFunctor: new Functor(new AtomTerm(":-"), 1),
                  clauseFunctor: new Functor(new AtomTerm(":-"), 2),
		  conjunctionFunctor: new Functor(new AtomTerm(","), 2),
		  disjunctionFunctor: new Functor(new AtomTerm(";"), 2),
		  localCutFunctor: new Functor(new AtomTerm("->"), 2),
		  listFunctor: new Functor(new AtomTerm("."), 2)};
